import { async, ComponentFixture, TestBed, tick } from "@angular/core/testing";

import { ReportsComponent } from "./reports.component";
import { TranslateModule } from "@ngx-translate/core";
import { AppMaterialModule } from "src/app/modules/shared/app-material/app-material.module";
import { NO_ERRORS_SCHEMA } from "@angular/core";
import { HttpClientTestingModule } from "@angular/common/http/testing";
import { ReactiveFormsModule, FormsModule, FormGroup } from "@angular/forms";
import { RouterTestingModule } from "@angular/router/testing";
import { JwtModule } from "@auth0/angular-jwt";
import { LinksService } from "src/app/services/links.service";
import { of } from "rxjs/internal/observable/of";

describe("ReportsComponent", () => {
  let component: ReportsComponent;
  let fixture: ComponentFixture<ReportsComponent>;

  let mockLinksService = jasmine.createSpyObj("LinksService", [
    "getFileReport",
    "sendfile",
    "downloadReferrals"
  ]);

  const fileReport = {
    state: "Success",
    userMessage: null,
    objectResponse:
      "https://webclickamdev.blob.core.windows.net/files-excel/ReportePagoComisiones20191021195441.xlsx"
  };

  const data = {
    fileBase64:
      "",
    business: "viajes",
    email: "david.betancur@pragma.com.co"
  };

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ReportsComponent],
      imports: [
        TranslateModule.forRoot(),
        AppMaterialModule,
        HttpClientTestingModule,
        ReactiveFormsModule,
        FormsModule,
        RouterTestingModule.withRoutes([]),
        JwtModule.forRoot({
          config: {
            tokenGetter: () => {
              return localStorage.getItem("ACCESS_TOKEN");
            },
            throwNoTokenError: true,
            whitelistedDomains: [],
            blacklistedRoutes: []
          }
        })
      ],
      providers: [{ provide: LinksService, useValue: mockLinksService }],
      schemas: [NO_ERRORS_SCHEMA]
    }).compileComponents();
  }));

  beforeEach(() => {
    localStorage.setItem(
      "ACCESS_TOKEN",
      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiZGF2aWQuYmV0YW5jdXJAcHJhZ21hLmNvbS5jbyIsInVzZXJOYW1lIjoiZGF2aWQuYmV0YW5jdXJAcHJhZ21hLmNvbS5jbyIsInJvbGUiOiJDTElDS0VSIiwiZXhwIjoxNTcxODY2MDgwLCJpc3MiOiJwcmFjdGluY2FuZXRjb3JlLmNvbSIsImF1ZCI6IkVzdHVkaWFudGVzIn0.UJahw9VBALxwYizSTppjGJYnr618EKlaFW-d3YLugnU"
    );
    mockLinksService.getFileReport.and.returnValue(of(fileReport));
    mockLinksService.downloadReferrals.and.returnValue(of(fileReport));
    mockLinksService.sendfile.and.returnValue(of(data));
    fixture = TestBed.createComponent(ReportsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it("should create", () => {
    expect(component).toBeTruthy();
    expect(mockLinksService.getFileReport).toHaveBeenCalled();
  });

  it("on file change trip valid", () => {
    const mockFile = new File([""], "name.xlsx", { type: "text/html" });
    const mockEvt = { target: { files: [mockFile] } };
    component.onFileChangeTrip(mockEvt);
    fixture.whenStable().then(() => {
      tick();
      expect(mockLinksService.sendfile).toHaveBeenCalled();
    })
  });

  it("on file change trip invalid", () => {
    const mockFile = new File([""], "name.txt", { type: "text/html" });
    const mockEvt = { target: { files: [mockFile] } };
    component.onFileChangeTrip(mockEvt);
    component.showErrorExt = true;
    expect(component.showErrorExt).toBeTruthy();
  });

  it("download referal", () => {
    component.dateForm.controls.dateStart.setValue('2019-11-10');
    component.dateForm.controls.dateEnd.setValue('2019-11-10');
    component.downloadReferal();
    expect(mockLinksService.downloadReferrals).toHaveBeenCalled();
  });

});
